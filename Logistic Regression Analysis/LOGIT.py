{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing Libraries\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import statsmodels.api as sm\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as lda\n",
    "import math\n",
    "import researchpy as rp\n",
    "from sklearn import preprocessing\n",
    "import matplotlib.pyplot as plt \n",
    "plt.rc(\"font\", size=14)\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "sns.set(style=\"white\")\n",
    "sns.set(style=\"whitegrid\", color_codes=True)\n",
    "import researchpy as rp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Social Progress Index</th>\n",
       "      <th>Basic Human Needs</th>\n",
       "      <th>Foundations of Wellbeing</th>\n",
       "      <th>Opportunity</th>\n",
       "      <th>Nutrition and Basic Medical Care</th>\n",
       "      <th>Water and Sanitation</th>\n",
       "      <th>Shelter</th>\n",
       "      <th>Personal Safety</th>\n",
       "      <th>Access to Basic Knowledge</th>\n",
       "      <th>...</th>\n",
       "      <th>Number of globally ranked universities</th>\n",
       "      <th>Depth of food deficit - capped</th>\n",
       "      <th>Household air pollution attributable deaths - bucketed</th>\n",
       "      <th>Adult literacy rate - capped</th>\n",
       "      <th>Lower secondary school enrollment - capped</th>\n",
       "      <th>Upper secondary school enrollment - capped</th>\n",
       "      <th>Gender parity in secondary enrollment - capped</th>\n",
       "      <th>Mobile telephone subscriptions - capped</th>\n",
       "      <th>Greenhouse gas emissions - bucketed</th>\n",
       "      <th>Number of globally ranked universities - bucketed</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>AFG</td>\n",
       "      <td>35.40</td>\n",
       "      <td>37.17</td>\n",
       "      <td>46.50</td>\n",
       "      <td>22.51</td>\n",
       "      <td>67.99</td>\n",
       "      <td>31.73</td>\n",
       "      <td>21.48</td>\n",
       "      <td>27.50</td>\n",
       "      <td>48.36</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>155.0</td>\n",
       "      <td>1</td>\n",
       "      <td>38.15612</td>\n",
       "      <td>63.464008</td>\n",
       "      <td>42.936451</td>\n",
       "      <td>0.55338</td>\n",
       "      <td>70.004910</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>ALB</td>\n",
       "      <td>68.19</td>\n",
       "      <td>80.71</td>\n",
       "      <td>73.64</td>\n",
       "      <td>50.23</td>\n",
       "      <td>97.67</td>\n",
       "      <td>88.30</td>\n",
       "      <td>69.14</td>\n",
       "      <td>67.74</td>\n",
       "      <td>92.56</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4</td>\n",
       "      <td>97.62414</td>\n",
       "      <td>92.562828</td>\n",
       "      <td>82.529991</td>\n",
       "      <td>0.95176</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>DZA</td>\n",
       "      <td>60.66</td>\n",
       "      <td>78.88</td>\n",
       "      <td>66.22</td>\n",
       "      <td>36.87</td>\n",
       "      <td>94.41</td>\n",
       "      <td>81.66</td>\n",
       "      <td>70.92</td>\n",
       "      <td>68.54</td>\n",
       "      <td>89.30</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>6</td>\n",
       "      <td>80.19891</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>62.025249</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>AGO</td>\n",
       "      <td>40.00</td>\n",
       "      <td>41.27</td>\n",
       "      <td>52.20</td>\n",
       "      <td>26.51</td>\n",
       "      <td>57.90</td>\n",
       "      <td>34.57</td>\n",
       "      <td>30.69</td>\n",
       "      <td>41.93</td>\n",
       "      <td>54.84</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>114.0</td>\n",
       "      <td>4</td>\n",
       "      <td>71.14099</td>\n",
       "      <td>39.163239</td>\n",
       "      <td>22.938231</td>\n",
       "      <td>0.64823</td>\n",
       "      <td>61.873297</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>ARG</td>\n",
       "      <td>73.08</td>\n",
       "      <td>80.51</td>\n",
       "      <td>73.57</td>\n",
       "      <td>65.17</td>\n",
       "      <td>96.81</td>\n",
       "      <td>96.56</td>\n",
       "      <td>63.81</td>\n",
       "      <td>64.86</td>\n",
       "      <td>95.29</td>\n",
       "      <td>...</td>\n",
       "      <td>16</td>\n",
       "      <td>8.0</td>\n",
       "      <td>6</td>\n",
       "      <td>98.08516</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>70.470871</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 78 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Country Code  Social Progress Index  Basic Human Needs  \\\n",
       "Country                                                              \n",
       "Afghanistan          AFG                  35.40              37.17   \n",
       "Albania              ALB                  68.19              80.71   \n",
       "Algeria              DZA                  60.66              78.88   \n",
       "Angola               AGO                  40.00              41.27   \n",
       "Argentina            ARG                  73.08              80.51   \n",
       "\n",
       "             Foundations of Wellbeing  Opportunity  \\\n",
       "Country                                              \n",
       "Afghanistan                     46.50        22.51   \n",
       "Albania                         73.64        50.23   \n",
       "Algeria                         66.22        36.87   \n",
       "Angola                          52.20        26.51   \n",
       "Argentina                       73.57        65.17   \n",
       "\n",
       "             Nutrition and Basic Medical Care  Water and Sanitation  Shelter  \\\n",
       "Country                                                                        \n",
       "Afghanistan                             67.99                 31.73    21.48   \n",
       "Albania                                 97.67                 88.30    69.14   \n",
       "Algeria                                 94.41                 81.66    70.92   \n",
       "Angola                                  57.90                 34.57    30.69   \n",
       "Argentina                               96.81                 96.56    63.81   \n",
       "\n",
       "             Personal Safety  Access to Basic Knowledge  ...  \\\n",
       "Country                                                  ...   \n",
       "Afghanistan            27.50                      48.36  ...   \n",
       "Albania                67.74                      92.56  ...   \n",
       "Algeria                68.54                      89.30  ...   \n",
       "Angola                 41.93                      54.84  ...   \n",
       "Argentina              64.86                      95.29  ...   \n",
       "\n",
       "             Number of globally ranked universities  \\\n",
       "Country                                               \n",
       "Afghanistan                                       0   \n",
       "Albania                                           0   \n",
       "Algeria                                           0   \n",
       "Angola                                            0   \n",
       "Argentina                                        16   \n",
       "\n",
       "             Depth of food deficit - capped  \\\n",
       "Country                                       \n",
       "Afghanistan                           155.0   \n",
       "Albania                                 8.0   \n",
       "Algeria                                24.0   \n",
       "Angola                                114.0   \n",
       "Argentina                               8.0   \n",
       "\n",
       "             Household air pollution attributable deaths - bucketed  \\\n",
       "Country                                                               \n",
       "Afghanistan                                                  1        \n",
       "Albania                                                      4        \n",
       "Algeria                                                      6        \n",
       "Angola                                                       4        \n",
       "Argentina                                                    6        \n",
       "\n",
       "             Adult literacy rate - capped  \\\n",
       "Country                                     \n",
       "Afghanistan                      38.15612   \n",
       "Albania                          97.62414   \n",
       "Algeria                          80.19891   \n",
       "Angola                           71.14099   \n",
       "Argentina                        98.08516   \n",
       "\n",
       "             Lower secondary school enrollment - capped  \\\n",
       "Country                                                   \n",
       "Afghanistan                                   63.464008   \n",
       "Albania                                       92.562828   \n",
       "Algeria                                      100.000000   \n",
       "Angola                                        39.163239   \n",
       "Argentina                                    100.000000   \n",
       "\n",
       "             Upper secondary school enrollment - capped  \\\n",
       "Country                                                   \n",
       "Afghanistan                                   42.936451   \n",
       "Albania                                       82.529991   \n",
       "Algeria                                       62.025249   \n",
       "Angola                                        22.938231   \n",
       "Argentina                                     70.470871   \n",
       "\n",
       "             Gender parity in secondary enrollment - capped  \\\n",
       "Country                                                       \n",
       "Afghanistan                                         0.55338   \n",
       "Albania                                             0.95176   \n",
       "Algeria                                             1.00000   \n",
       "Angola                                              0.64823   \n",
       "Argentina                                           1.00000   \n",
       "\n",
       "             Mobile telephone subscriptions - capped  \\\n",
       "Country                                                \n",
       "Afghanistan                                70.004910   \n",
       "Albania                                   100.000000   \n",
       "Algeria                                   100.000000   \n",
       "Angola                                     61.873297   \n",
       "Argentina                                 100.000000   \n",
       "\n",
       "             Greenhouse gas emissions - bucketed  \\\n",
       "Country                                            \n",
       "Afghanistan                                    2   \n",
       "Albania                                        2   \n",
       "Algeria                                        2   \n",
       "Angola                                         1   \n",
       "Argentina                                      2   \n",
       "\n",
       "             Number of globally ranked universities - bucketed  \n",
       "Country                                                         \n",
       "Afghanistan                                                  0  \n",
       "Albania                                                      0  \n",
       "Algeria                                                      0  \n",
       "Angola                                                       0  \n",
       "Argentina                                                    4  \n",
       "\n",
       "[5 rows x 78 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reading in data from Social Progress Index (2015)\n",
    "\n",
    "SPIndex = pd.read_excel(\n",
    "    '/Users/jborri/Desktop/Datasets/2015 Social Progress Index Data.xlsx',\n",
    "    index_col='Country',\n",
    "    na_values=['NA']\n",
    "      )\n",
    "SPIndex.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HDI Rank</th>\n",
       "      <th>Human Development Index (HDI)</th>\n",
       "      <th>Life Expectancy at Birth</th>\n",
       "      <th>Expected Years of Education</th>\n",
       "      <th>Mean Years of Education</th>\n",
       "      <th>Gross National Income (GNI) per Capita</th>\n",
       "      <th>GNI per Capita Rank Minus HDI Rank</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Norway</th>\n",
       "      <td>1</td>\n",
       "      <td>0.944</td>\n",
       "      <td>81.6</td>\n",
       "      <td>17.5</td>\n",
       "      <td>12.6</td>\n",
       "      <td>64992</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Australia</th>\n",
       "      <td>2</td>\n",
       "      <td>0.935</td>\n",
       "      <td>82.4</td>\n",
       "      <td>20.2</td>\n",
       "      <td>13.0</td>\n",
       "      <td>42261</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Switzerland</th>\n",
       "      <td>3</td>\n",
       "      <td>0.930</td>\n",
       "      <td>83.0</td>\n",
       "      <td>15.8</td>\n",
       "      <td>12.8</td>\n",
       "      <td>56431</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Denmark</th>\n",
       "      <td>4</td>\n",
       "      <td>0.923</td>\n",
       "      <td>80.2</td>\n",
       "      <td>18.7</td>\n",
       "      <td>12.7</td>\n",
       "      <td>44025</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Netherlands</th>\n",
       "      <td>5</td>\n",
       "      <td>0.922</td>\n",
       "      <td>81.6</td>\n",
       "      <td>17.9</td>\n",
       "      <td>11.9</td>\n",
       "      <td>45435</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             HDI Rank  Human Development Index (HDI)  \\\n",
       "Country                                                \n",
       "Norway              1                          0.944   \n",
       "Australia           2                          0.935   \n",
       "Switzerland         3                          0.930   \n",
       "Denmark             4                          0.923   \n",
       "Netherlands         5                          0.922   \n",
       "\n",
       "             Life Expectancy at Birth  Expected Years of Education  \\\n",
       "Country                                                              \n",
       "Norway                           81.6                         17.5   \n",
       "Australia                        82.4                         20.2   \n",
       "Switzerland                      83.0                         15.8   \n",
       "Denmark                          80.2                         18.7   \n",
       "Netherlands                      81.6                         17.9   \n",
       "\n",
       "             Mean Years of Education  Gross National Income (GNI) per Capita  \\\n",
       "Country                                                                        \n",
       "Norway                          12.6                                   64992   \n",
       "Australia                       13.0                                   42261   \n",
       "Switzerland                     12.8                                   56431   \n",
       "Denmark                         12.7                                   44025   \n",
       "Netherlands                     11.9                                   45435   \n",
       "\n",
       "             GNI per Capita Rank Minus HDI Rank  \n",
       "Country                                          \n",
       "Norway                                        5  \n",
       "Australia                                    17  \n",
       "Switzerland                                   6  \n",
       "Denmark                                      11  \n",
       "Netherlands                                   9  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reading in data from Human Development Index (United Nations- 2015)\n",
    "\n",
    "UNHDIndex = pd.read_excel(\n",
    "    '/Users/jborri/Desktop/Datasets/HumanDevelopment.xlsx',\n",
    "    index_col='Country',\n",
    "    na_values=['NA']\n",
    ")\n",
    "UNHDIndex.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Life Ladder</th>\n",
       "      <th>Log GDP per capita</th>\n",
       "      <th>Social support</th>\n",
       "      <th>Healthy life expectancy at birth</th>\n",
       "      <th>Freedom to make life choices</th>\n",
       "      <th>Generosity</th>\n",
       "      <th>Perceptions of corruption</th>\n",
       "      <th>Positive affect</th>\n",
       "      <th>Negative affect</th>\n",
       "      <th>Confidence in national government</th>\n",
       "      <th>...</th>\n",
       "      <th>GINI index (World Bank estimate)</th>\n",
       "      <th>GINI index (World Bank estimate), average 2000-16</th>\n",
       "      <th>gini of household income reported in Gallup, by wp5-year</th>\n",
       "      <th>Most people can be trusted, Gallup</th>\n",
       "      <th>Most people can be trusted, WVS round 1981-1984</th>\n",
       "      <th>Most people can be trusted, WVS round 1989-1993</th>\n",
       "      <th>Most people can be trusted, WVS round 1994-1998</th>\n",
       "      <th>Most people can be trusted, WVS round 1999-2004</th>\n",
       "      <th>Most people can be trusted, WVS round 2005-2009</th>\n",
       "      <th>Most people can be trusted, WVS round 2010-2014</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>2.694303</td>\n",
       "      <td>7.494588</td>\n",
       "      <td>0.507516</td>\n",
       "      <td>52.599998</td>\n",
       "      <td>0.373536</td>\n",
       "      <td>-0.084888</td>\n",
       "      <td>0.927606</td>\n",
       "      <td>0.424125</td>\n",
       "      <td>0.404904</td>\n",
       "      <td>0.364666</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.290681</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>5.004403</td>\n",
       "      <td>9.412399</td>\n",
       "      <td>0.683592</td>\n",
       "      <td>68.699997</td>\n",
       "      <td>0.824212</td>\n",
       "      <td>0.005385</td>\n",
       "      <td>0.899129</td>\n",
       "      <td>0.713300</td>\n",
       "      <td>0.318997</td>\n",
       "      <td>0.435338</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.303250</td>\n",
       "      <td>0.456174</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.243243</td>\n",
       "      <td>0.232000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>5.043086</td>\n",
       "      <td>9.557952</td>\n",
       "      <td>0.798651</td>\n",
       "      <td>65.900002</td>\n",
       "      <td>0.583381</td>\n",
       "      <td>-0.172413</td>\n",
       "      <td>0.758704</td>\n",
       "      <td>0.591043</td>\n",
       "      <td>0.292946</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.276000</td>\n",
       "      <td>0.667872</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.107644</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.179286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>5.792797</td>\n",
       "      <td>9.809972</td>\n",
       "      <td>0.899912</td>\n",
       "      <td>68.800003</td>\n",
       "      <td>0.845895</td>\n",
       "      <td>-0.206937</td>\n",
       "      <td>0.855255</td>\n",
       "      <td>0.820310</td>\n",
       "      <td>0.320502</td>\n",
       "      <td>0.261352</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.460938</td>\n",
       "      <td>0.405356</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.270073</td>\n",
       "      <td>0.223553</td>\n",
       "      <td>0.170844</td>\n",
       "      <td>0.150154</td>\n",
       "      <td>0.174058</td>\n",
       "      <td>0.193531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Armenia</th>\n",
       "      <td>5.062449</td>\n",
       "      <td>9.119424</td>\n",
       "      <td>0.814449</td>\n",
       "      <td>66.900002</td>\n",
       "      <td>0.807644</td>\n",
       "      <td>-0.149109</td>\n",
       "      <td>0.676826</td>\n",
       "      <td>0.581488</td>\n",
       "      <td>0.454840</td>\n",
       "      <td>0.670828</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.319250</td>\n",
       "      <td>0.406403</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.235000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.109136</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Life Ladder  Log GDP per capita  Social support  \\\n",
       "Country                                                        \n",
       "Afghanistan     2.694303            7.494588        0.507516   \n",
       "Albania         5.004403            9.412399        0.683592   \n",
       "Algeria         5.043086            9.557952        0.798651   \n",
       "Argentina       5.792797            9.809972        0.899912   \n",
       "Armenia         5.062449            9.119424        0.814449   \n",
       "\n",
       "             Healthy life expectancy at birth  Freedom to make life choices  \\\n",
       "Country                                                                       \n",
       "Afghanistan                         52.599998                      0.373536   \n",
       "Albania                             68.699997                      0.824212   \n",
       "Algeria                             65.900002                      0.583381   \n",
       "Argentina                           68.800003                      0.845895   \n",
       "Armenia                             66.900002                      0.807644   \n",
       "\n",
       "             Generosity  Perceptions of corruption  Positive affect  \\\n",
       "Country                                                               \n",
       "Afghanistan   -0.084888                   0.927606         0.424125   \n",
       "Albania        0.005385                   0.899129         0.713300   \n",
       "Algeria       -0.172413                   0.758704         0.591043   \n",
       "Argentina     -0.206937                   0.855255         0.820310   \n",
       "Armenia       -0.149109                   0.676826         0.581488   \n",
       "\n",
       "             Negative affect  Confidence in national government  ...  \\\n",
       "Country                                                          ...   \n",
       "Afghanistan         0.404904                           0.364666  ...   \n",
       "Albania             0.318997                           0.435338  ...   \n",
       "Algeria             0.292946                                NaN  ...   \n",
       "Argentina           0.320502                           0.261352  ...   \n",
       "Armenia             0.454840                           0.670828  ...   \n",
       "\n",
       "             GINI index (World Bank estimate)  \\\n",
       "Country                                         \n",
       "Afghanistan                               NaN   \n",
       "Albania                                   NaN   \n",
       "Algeria                                   NaN   \n",
       "Argentina                                 NaN   \n",
       "Armenia                                   NaN   \n",
       "\n",
       "             GINI index (World Bank estimate), average 2000-16  \\\n",
       "Country                                                          \n",
       "Afghanistan                                                NaN   \n",
       "Albania                                               0.303250   \n",
       "Algeria                                               0.276000   \n",
       "Argentina                                             0.460938   \n",
       "Armenia                                               0.319250   \n",
       "\n",
       "             gini of household income reported in Gallup, by wp5-year  \\\n",
       "Country                                                                 \n",
       "Afghanistan                                           0.290681          \n",
       "Albania                                               0.456174          \n",
       "Algeria                                               0.667872          \n",
       "Argentina                                             0.405356          \n",
       "Armenia                                               0.406403          \n",
       "\n",
       "             Most people can be trusted, Gallup  \\\n",
       "Country                                           \n",
       "Afghanistan                                 NaN   \n",
       "Albania                                     NaN   \n",
       "Algeria                                     NaN   \n",
       "Argentina                                   NaN   \n",
       "Armenia                                     NaN   \n",
       "\n",
       "             Most people can be trusted, WVS round 1981-1984  \\\n",
       "Country                                                        \n",
       "Afghanistan                                              NaN   \n",
       "Albania                                                  NaN   \n",
       "Algeria                                                  NaN   \n",
       "Argentina                                           0.270073   \n",
       "Armenia                                                  NaN   \n",
       "\n",
       "             Most people can be trusted, WVS round 1989-1993  \\\n",
       "Country                                                        \n",
       "Afghanistan                                              NaN   \n",
       "Albania                                                  NaN   \n",
       "Algeria                                                  NaN   \n",
       "Argentina                                           0.223553   \n",
       "Armenia                                                  NaN   \n",
       "\n",
       "             Most people can be trusted, WVS round 1994-1998  \\\n",
       "Country                                                        \n",
       "Afghanistan                                              NaN   \n",
       "Albania                                             0.243243   \n",
       "Algeria                                                  NaN   \n",
       "Argentina                                           0.170844   \n",
       "Armenia                                             0.235000   \n",
       "\n",
       "             Most people can be trusted, WVS round 1999-2004  \\\n",
       "Country                                                        \n",
       "Afghanistan                                              NaN   \n",
       "Albania                                             0.232000   \n",
       "Algeria                                             0.107644   \n",
       "Argentina                                           0.150154   \n",
       "Armenia                                                  NaN   \n",
       "\n",
       "             Most people can be trusted, WVS round 2005-2009  \\\n",
       "Country                                                        \n",
       "Afghanistan                                              NaN   \n",
       "Albania                                                  NaN   \n",
       "Algeria                                                  NaN   \n",
       "Argentina                                           0.174058   \n",
       "Armenia                                                  NaN   \n",
       "\n",
       "             Most people can be trusted, WVS round 2010-2014  \n",
       "Country                                                       \n",
       "Afghanistan                                              NaN  \n",
       "Albania                                                  NaN  \n",
       "Algeria                                             0.179286  \n",
       "Argentina                                           0.193531  \n",
       "Armenia                                             0.109136  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reading in data from World Happiness Report (2019)\n",
    "\n",
    "WHRIndex = pd.read_excel(\n",
    "    '/Users/jborri/Desktop/Datasets/WHINDEX2019.xls',\n",
    "    index_col='Country',\n",
    "    na_values=['NA']\n",
    ")\n",
    "WHRIndex.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year and Survey</th>\n",
       "      <th>Multidimensional Poverty Index (MPI, HDRO)</th>\n",
       "      <th>MPI HDRO Percent</th>\n",
       "      <th>Multidimensional Poverty Index (MPI, 2010)</th>\n",
       "      <th>MPI 2010 Percent</th>\n",
       "      <th>Population in Multidimensional Poverty</th>\n",
       "      <th>Intensity of Deprivation</th>\n",
       "      <th>Education Deprivation</th>\n",
       "      <th>Health Deprivation</th>\n",
       "      <th>Living Standards</th>\n",
       "      <th>Population Below National Poverty Line</th>\n",
       "      <th>Population Below $1.25 per Day</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>2010/2011 M</td>\n",
       "      <td>0.293</td>\n",
       "      <td>58.8</td>\n",
       "      <td>0.353</td>\n",
       "      <td>66.2</td>\n",
       "      <td>17,116</td>\n",
       "      <td>49.9</td>\n",
       "      <td>45.6</td>\n",
       "      <td>19.2</td>\n",
       "      <td>35.2</td>\n",
       "      <td>35.8</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>2008/2009 D</td>\n",
       "      <td>0.005</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.005</td>\n",
       "      <td>1.4</td>\n",
       "      <td>38</td>\n",
       "      <td>38.3</td>\n",
       "      <td>22.4</td>\n",
       "      <td>47.1</td>\n",
       "      <td>30.5</td>\n",
       "      <td>14.3</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>2005 N</td>\n",
       "      <td>0.015</td>\n",
       "      <td>3.7</td>\n",
       "      <td>0.011</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1,438</td>\n",
       "      <td>39.1</td>\n",
       "      <td>38.2</td>\n",
       "      <td>27.8</td>\n",
       "      <td>34.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Armenia</th>\n",
       "      <td>2010 D</td>\n",
       "      <td>0.002</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.001</td>\n",
       "      <td>0.3</td>\n",
       "      <td>18</td>\n",
       "      <td>37.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>87.8</td>\n",
       "      <td>8.7</td>\n",
       "      <td>32.0</td>\n",
       "      <td>1.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Azerbaijan</th>\n",
       "      <td>2006 D</td>\n",
       "      <td>0.009</td>\n",
       "      <td>2.4</td>\n",
       "      <td>0.021</td>\n",
       "      <td>5.3</td>\n",
       "      <td>210</td>\n",
       "      <td>38.2</td>\n",
       "      <td>20.0</td>\n",
       "      <td>50.7</td>\n",
       "      <td>29.3</td>\n",
       "      <td>5.3</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Year and Survey  Multidimensional Poverty Index (MPI, HDRO)  \\\n",
       "Country                                                                   \n",
       "Afghanistan     2010/2011 M                                       0.293   \n",
       "Albania         2008/2009 D                                       0.005   \n",
       "Argentina            2005 N                                       0.015   \n",
       "Armenia              2010 D                                       0.002   \n",
       "Azerbaijan           2006 D                                       0.009   \n",
       "\n",
       "             MPI HDRO Percent  Multidimensional Poverty Index (MPI, 2010)  \\\n",
       "Country                                                                     \n",
       "Afghanistan              58.8                                       0.353   \n",
       "Albania                   1.2                                       0.005   \n",
       "Argentina                 3.7                                       0.011   \n",
       "Armenia                   0.6                                       0.001   \n",
       "Azerbaijan                2.4                                       0.021   \n",
       "\n",
       "             MPI 2010 Percent Population in Multidimensional Poverty  \\\n",
       "Country                                                                \n",
       "Afghanistan              66.2                                 17,116   \n",
       "Albania                   1.4                                     38   \n",
       "Argentina                 2.9                                  1,438   \n",
       "Armenia                   0.3                                     18   \n",
       "Azerbaijan                5.3                                    210   \n",
       "\n",
       "             Intensity of Deprivation  Education Deprivation  \\\n",
       "Country                                                        \n",
       "Afghanistan                      49.9                   45.6   \n",
       "Albania                          38.3                   22.4   \n",
       "Argentina                        39.1                   38.2   \n",
       "Armenia                          37.0                    3.4   \n",
       "Azerbaijan                       38.2                   20.0   \n",
       "\n",
       "             Health Deprivation  Living Standards  \\\n",
       "Country                                             \n",
       "Afghanistan                19.2              35.2   \n",
       "Albania                    47.1              30.5   \n",
       "Argentina                  27.8              34.0   \n",
       "Armenia                    87.8               8.7   \n",
       "Azerbaijan                 50.7              29.3   \n",
       "\n",
       "             Population Below National Poverty Line  \\\n",
       "Country                                               \n",
       "Afghanistan                                    35.8   \n",
       "Albania                                        14.3   \n",
       "Argentina                                       NaN   \n",
       "Armenia                                        32.0   \n",
       "Azerbaijan                                      5.3   \n",
       "\n",
       "             Population Below $1.25 per Day  \n",
       "Country                                      \n",
       "Afghanistan                             NaN  \n",
       "Albania                                 0.5  \n",
       "Argentina                               1.4  \n",
       "Armenia                                 1.8  \n",
       "Azerbaijan                              0.3  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Reading in data from Multidimensional Poverty Index (United Nations 2015)\n",
    "\n",
    "MPIndex = pd.read_csv(\n",
    "    '/Users/jborri/Desktop/Datasets/multidimensional_poverty.csv',\n",
    "    index_col='Country',\n",
    "    na_values=['NA']\n",
    ")\n",
    "MPIndex.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(212, 121)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Merging DataFrames\n",
    "\n",
    "IndexTotal = pd.concat([\n",
    "    SPIndex,\n",
    "    UNHDIndex,\n",
    "    WHRIndex,\n",
    "    MPIndex\n",
    "    ],\n",
    "    axis=1\n",
    "    )\n",
    "IndexTotal.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Social Progress Index</th>\n",
       "      <th>Basic Human Needs</th>\n",
       "      <th>Foundations of Wellbeing</th>\n",
       "      <th>Opportunity</th>\n",
       "      <th>Nutrition and Basic Medical Care</th>\n",
       "      <th>Water and Sanitation</th>\n",
       "      <th>Shelter</th>\n",
       "      <th>Personal Safety</th>\n",
       "      <th>Access to Basic Knowledge</th>\n",
       "      <th>...</th>\n",
       "      <th>MPI HDRO Percent</th>\n",
       "      <th>Multidimensional Poverty Index (MPI, 2010)</th>\n",
       "      <th>MPI 2010 Percent</th>\n",
       "      <th>Population in Multidimensional Poverty</th>\n",
       "      <th>Intensity of Deprivation</th>\n",
       "      <th>Education Deprivation</th>\n",
       "      <th>Health Deprivation</th>\n",
       "      <th>Living Standards</th>\n",
       "      <th>Population Below National Poverty Line</th>\n",
       "      <th>Population Below $1.25 per Day</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>AFG</td>\n",
       "      <td>35.40</td>\n",
       "      <td>37.17</td>\n",
       "      <td>46.50</td>\n",
       "      <td>22.51</td>\n",
       "      <td>67.99</td>\n",
       "      <td>31.73</td>\n",
       "      <td>21.48</td>\n",
       "      <td>27.50</td>\n",
       "      <td>48.36</td>\n",
       "      <td>...</td>\n",
       "      <td>58.8</td>\n",
       "      <td>0.353</td>\n",
       "      <td>66.2</td>\n",
       "      <td>17,116</td>\n",
       "      <td>49.9</td>\n",
       "      <td>45.6</td>\n",
       "      <td>19.2</td>\n",
       "      <td>35.2</td>\n",
       "      <td>35.8</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>ALB</td>\n",
       "      <td>68.19</td>\n",
       "      <td>80.71</td>\n",
       "      <td>73.64</td>\n",
       "      <td>50.23</td>\n",
       "      <td>97.67</td>\n",
       "      <td>88.30</td>\n",
       "      <td>69.14</td>\n",
       "      <td>67.74</td>\n",
       "      <td>92.56</td>\n",
       "      <td>...</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.005</td>\n",
       "      <td>1.4</td>\n",
       "      <td>38</td>\n",
       "      <td>38.3</td>\n",
       "      <td>22.4</td>\n",
       "      <td>47.1</td>\n",
       "      <td>30.5</td>\n",
       "      <td>14.3</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>DZA</td>\n",
       "      <td>60.66</td>\n",
       "      <td>78.88</td>\n",
       "      <td>66.22</td>\n",
       "      <td>36.87</td>\n",
       "      <td>94.41</td>\n",
       "      <td>81.66</td>\n",
       "      <td>70.92</td>\n",
       "      <td>68.54</td>\n",
       "      <td>89.30</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>AGO</td>\n",
       "      <td>40.00</td>\n",
       "      <td>41.27</td>\n",
       "      <td>52.20</td>\n",
       "      <td>26.51</td>\n",
       "      <td>57.90</td>\n",
       "      <td>34.57</td>\n",
       "      <td>30.69</td>\n",
       "      <td>41.93</td>\n",
       "      <td>54.84</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>ARG</td>\n",
       "      <td>73.08</td>\n",
       "      <td>80.51</td>\n",
       "      <td>73.57</td>\n",
       "      <td>65.17</td>\n",
       "      <td>96.81</td>\n",
       "      <td>96.56</td>\n",
       "      <td>63.81</td>\n",
       "      <td>64.86</td>\n",
       "      <td>95.29</td>\n",
       "      <td>...</td>\n",
       "      <td>3.7</td>\n",
       "      <td>0.011</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1,438</td>\n",
       "      <td>39.1</td>\n",
       "      <td>38.2</td>\n",
       "      <td>27.8</td>\n",
       "      <td>34.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 121 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Country Code  Social Progress Index  Basic Human Needs  \\\n",
       "Country                                                              \n",
       "Afghanistan          AFG                  35.40              37.17   \n",
       "Albania              ALB                  68.19              80.71   \n",
       "Algeria              DZA                  60.66              78.88   \n",
       "Angola               AGO                  40.00              41.27   \n",
       "Argentina            ARG                  73.08              80.51   \n",
       "\n",
       "             Foundations of Wellbeing  Opportunity  \\\n",
       "Country                                              \n",
       "Afghanistan                     46.50        22.51   \n",
       "Albania                         73.64        50.23   \n",
       "Algeria                         66.22        36.87   \n",
       "Angola                          52.20        26.51   \n",
       "Argentina                       73.57        65.17   \n",
       "\n",
       "             Nutrition and Basic Medical Care  Water and Sanitation  Shelter  \\\n",
       "Country                                                                        \n",
       "Afghanistan                             67.99                 31.73    21.48   \n",
       "Albania                                 97.67                 88.30    69.14   \n",
       "Algeria                                 94.41                 81.66    70.92   \n",
       "Angola                                  57.90                 34.57    30.69   \n",
       "Argentina                               96.81                 96.56    63.81   \n",
       "\n",
       "             Personal Safety  Access to Basic Knowledge  ...  \\\n",
       "Country                                                  ...   \n",
       "Afghanistan            27.50                      48.36  ...   \n",
       "Albania                67.74                      92.56  ...   \n",
       "Algeria                68.54                      89.30  ...   \n",
       "Angola                 41.93                      54.84  ...   \n",
       "Argentina              64.86                      95.29  ...   \n",
       "\n",
       "             MPI HDRO Percent  Multidimensional Poverty Index (MPI, 2010)  \\\n",
       "Country                                                                     \n",
       "Afghanistan              58.8                                       0.353   \n",
       "Albania                   1.2                                       0.005   \n",
       "Algeria                   NaN                                         NaN   \n",
       "Angola                    NaN                                         NaN   \n",
       "Argentina                 3.7                                       0.011   \n",
       "\n",
       "             MPI 2010 Percent  Population in Multidimensional Poverty  \\\n",
       "Country                                                                 \n",
       "Afghanistan              66.2                                  17,116   \n",
       "Albania                   1.4                                      38   \n",
       "Algeria                   NaN                                     NaN   \n",
       "Angola                    NaN                                     NaN   \n",
       "Argentina                 2.9                                   1,438   \n",
       "\n",
       "             Intensity of Deprivation  Education Deprivation  \\\n",
       "Country                                                        \n",
       "Afghanistan                      49.9                   45.6   \n",
       "Albania                          38.3                   22.4   \n",
       "Algeria                           NaN                    NaN   \n",
       "Angola                            NaN                    NaN   \n",
       "Argentina                        39.1                   38.2   \n",
       "\n",
       "             Health Deprivation  Living Standards  \\\n",
       "Country                                             \n",
       "Afghanistan                19.2              35.2   \n",
       "Albania                    47.1              30.5   \n",
       "Algeria                     NaN               NaN   \n",
       "Angola                      NaN               NaN   \n",
       "Argentina                  27.8              34.0   \n",
       "\n",
       "             Population Below National Poverty Line  \\\n",
       "Country                                               \n",
       "Afghanistan                                    35.8   \n",
       "Albania                                        14.3   \n",
       "Algeria                                         NaN   \n",
       "Angola                                          NaN   \n",
       "Argentina                                       NaN   \n",
       "\n",
       "             Population Below $1.25 per Day  \n",
       "Country                                      \n",
       "Afghanistan                             NaN  \n",
       "Albania                                 0.5  \n",
       "Algeria                                 NaN  \n",
       "Angola                                  NaN  \n",
       "Argentina                               1.4  \n",
       "\n",
       "[5 rows x 121 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IndexTotal.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Country Code                               object\n",
      "Social Progress Index                     float64\n",
      "Basic Human Needs                         float64\n",
      "Foundations of Wellbeing                  float64\n",
      "Opportunity                               float64\n",
      "                                           ...   \n",
      "Education Deprivation                     float64\n",
      "Health Deprivation                        float64\n",
      "Living Standards                          float64\n",
      "Population Below National Poverty Line    float64\n",
      "Population Below $1.25 per Day            float64\n",
      "Length: 121, dtype: object\n"
     ]
    }
   ],
   "source": [
    "#Checking Indicator dtypes to make sure they are all numeric (they aren't but)\n",
    "print(IndexTotal.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    136.000000\n",
       "mean       0.810544\n",
       "std        0.116332\n",
       "min        0.484715\n",
       "25%        0.739719\n",
       "50%        0.836641\n",
       "75%        0.905608\n",
       "max        0.984489\n",
       "Name: Social support, dtype: float64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Describing Merged DF for our dependent variable.\n",
    "#WHI defines social support as follows:  \"Social support (or having someone to count on in times of trouble) is the national\n",
    "#average of the binary responses (either 0 or 1) to the GWP question “If you\n",
    "#were in trouble, do you have relatives or friends you can count on to help you\n",
    "#whenever you need them, or not?”\"\n",
    "\n",
    "IndexTotal['Social support'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    212.000000\n",
       "mean       0.160377\n",
       "std        0.367824\n",
       "min        0.000000\n",
       "25%        0.000000\n",
       "50%        0.000000\n",
       "75%        0.000000\n",
       "max        1.000000\n",
       "Name: SS Binary, dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Creating Binary Variable for Social Support, (using 25th percentile)\n",
    "\n",
    "IndexTotal['SS Binary'] = 0\n",
    "IndexTotal.loc[IndexTotal['Social support'] < 0.739719,\n",
    "               ['SS Binary']\n",
    "               ] = 1 #Nations with lower SS value will be assigned 1\n",
    "IndexTotal['SS Binary'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Country\n",
       "Afghanistan                 1\n",
       "Albania                     1\n",
       "Algeria                     0\n",
       "Angola                      0\n",
       "Argentina                   0\n",
       "                           ..\n",
       "North Cyprus                0\n",
       "Palestinian Territories     0\n",
       "South Korea                 0\n",
       "Taiwan Province of China    0\n",
       "Somalia                     0\n",
       "Name: SS Binary, Length: 212, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IndexTotal['SS Binary']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.469510\n",
      "         Iterations 6\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:              SS Binary   No. Observations:                   63\n",
      "Model:                          Logit   Df Residuals:                       57\n",
      "Method:                           MLE   Df Model:                            5\n",
      "Date:                Thu, 21 Dec 2023   Pseudo R-squ.:                  0.3073\n",
      "Time:                        22:03:30   Log-Likelihood:                -29.579\n",
      "converged:                       True   LL-Null:                       -42.703\n",
      "Covariance Type:            nonrobust   LLR p-value:                 7.988e-05\n",
      "====================================================================================================\n",
      "                                       coef    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "Undernourishment                     0.0173      0.031      0.555      0.579      -0.044       0.079\n",
      "Maternal mortality rate              0.0036      0.004      0.902      0.367      -0.004       0.012\n",
      "Child mortality rate                 0.0103      0.021      0.490      0.624      -0.031       0.052\n",
      "Life expectancy                      0.0035      0.146      0.024      0.981      -0.282       0.289\n",
      "Healthy life expectancy at birth    -0.0251      0.165     -0.152      0.879      -0.349       0.299\n",
      "Health Deprivation                  -0.0219      0.026     -0.840      0.401      -0.073       0.029\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "#Creating Logit Regression Model for Health\n",
    "\n",
    "Y = IndexTotal['SS Binary']\n",
    "X = IndexTotal[['Undernourishment',\n",
    "                'Maternal mortality rate',\n",
    "                'Child mortality rate',\n",
    "                'Life expectancy',\n",
    "                'Healthy life expectancy at birth',\n",
    "                'Health Deprivation'\n",
    "                \n",
    "                ]]\n",
    "model0 = sm.Logit(Y, X, missing='drop').fit()\n",
    "print(model0.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0174784365494187 1.0036484243035735 1.0103783260498544 1.0035553521442009 1.0254273053418048 1.0221026932150699\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/jt/bdkqy39970s3tmsfrwm8j1yc0000gn/T/ipykernel_11284/2295710939.py:3: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  print(math.exp(model0.params[0]), math.exp(model0.params[1]), math.exp(model0.params[2]), math.exp(model0.params[3]), 1/math.exp(model0.params[4]), 1/math.exp(model0.params[5]))\n"
     ]
    }
   ],
   "source": [
    "#exponentiating to interpret as odds.\n",
    "\n",
    "print(math.exp(model0.params[0]), math.exp(model0.params[1]), math.exp(model0.params[2]), math.exp(model0.params[3]), 1/math.exp(model0.params[4]), 1/math.exp(model0.params[5]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Logit Marginal Effects       \n",
      "=====================================\n",
      "Dep. Variable:              SS Binary\n",
      "Method:                          dydx\n",
      "At:                           overall\n",
      "====================================================================================================\n",
      "                                      dy/dx    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "Undernourishment                     0.0026      0.005      0.560      0.575      -0.007       0.012\n",
      "Maternal mortality rate              0.0006      0.001      0.923      0.356      -0.001       0.002\n",
      "Child mortality rate                 0.0016      0.003      0.493      0.622      -0.005       0.008\n",
      "Life expectancy                      0.0005      0.022      0.024      0.981      -0.043       0.044\n",
      "Healthy life expectancy at birth    -0.0038      0.025     -0.152      0.879      -0.053       0.045\n",
      "Health Deprivation                  -0.0033      0.004     -0.846      0.397      -0.011       0.004\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "model0_marginals = model0.get_margeff()\n",
    "print(model0_marginals.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Logit Marginal Effects       \n",
      "=====================================\n",
      "Dep. Variable:              SS Binary\n",
      "Method:                          dydx\n",
      "At:                            median\n",
      "====================================================================================================\n",
      "                                      dy/dx    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "Undernourishment                     0.0038      0.007      0.568      0.570      -0.009       0.017\n",
      "Maternal mortality rate              0.0008      0.001      0.907      0.364      -0.001       0.003\n",
      "Child mortality rate                 0.0023      0.005      0.485      0.628      -0.007       0.011\n",
      "Life expectancy                      0.0008      0.032      0.024      0.981      -0.062       0.064\n",
      "Healthy life expectancy at birth    -0.0055      0.036     -0.152      0.879      -0.077       0.066\n",
      "Health Deprivation                  -0.0048      0.006     -0.803      0.422      -0.017       0.007\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "model0_marginals = model0.get_margeff(at='median')\n",
    "print(model0_marginals.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[31.  6.]\n",
      " [ 7. 19.]]\n"
     ]
    }
   ],
   "source": [
    "model0_pred = model0.pred_table()\n",
    "print(model0_pred) # Correct predictions are on the diagonal of the 2d array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8378378378378378 0.7307692307692307\n"
     ]
    }
   ],
   "source": [
    "correct_i = 31 / (31 + 6) # The proportion of correct predictions of 0.\n",
    "correct_j = 19 / (19 + 7) # The proportion of correct predictions of 1.\n",
    "print(correct_i, correct_j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='SS Binary', data=IndexTotal)\n",
    "plt.title('Sense of Community for Select Countries (Binary)')\n",
    "plt.show()\n",
    "plt.savefig('Count_plot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 836.472x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p = sns.displot(IndexTotal, x='Undernourishment', hue='SS Binary', multiple=\"stack\", height=6, aspect=1.25)\n",
    "plt.title('Social Support by Undernourishment')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 836.472x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p = sns.displot(IndexTotal, x='Health Deprivation', hue='SS Binary', multiple=\"stack\", height=6, aspect=1.25)\n",
    "plt.title('Social Support by Undernourishment')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.438034\n",
      "         Iterations 7\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:              SS Binary   No. Observations:                   58\n",
      "Model:                          Logit   Df Residuals:                       49\n",
      "Method:                           MLE   Df Model:                            8\n",
      "Date:                Thu, 21 Dec 2023   Pseudo R-squ.:                  0.3592\n",
      "Time:                        22:17:54   Log-Likelihood:                -25.406\n",
      "converged:                       True   LL-Null:                       -39.649\n",
      "Covariance Type:            nonrobust   LLR p-value:                 0.0003901\n",
      "============================================================================================================================\n",
      "                                                               coef    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------------------------------------\n",
      "Access to piped water                                       -0.0010      0.027     -0.036      0.972      -0.054       0.052\n",
      "Availability of affordable housing                          -0.8627      2.884     -0.299      0.765      -6.515       4.790\n",
      "Depth of food deficit                                        0.0010      0.005      0.219      0.827      -0.008       0.010\n",
      "Human Development Index (HDI)                                2.4853      4.779      0.520      0.603      -6.881      11.852\n",
      "Gross National Income (GNI) per Capita                      -0.0003      0.000     -1.458      0.145      -0.001    9.59e-05\n",
      "gini of household income reported in Gallup, by wp5-year     0.3062      3.801      0.081      0.936      -7.143       7.755\n",
      "Multidimensional Poverty Index (MPI, 2010)                   6.2117      4.044      1.536      0.125      -1.714      14.138\n",
      "Living Standards                                            -0.0234      0.044     -0.537      0.591      -0.109       0.062\n",
      "Population Below National Poverty Line                      -0.0057      0.029     -0.198      0.843      -0.062       0.051\n",
      "============================================================================================================================\n"
     ]
    }
   ],
   "source": [
    "#Regression Model for Economic/Poverty\n",
    "\n",
    "Y = IndexTotal['SS Binary']\n",
    "X = IndexTotal[['Access to piped water',\n",
    "                'Availability of affordable housing',\n",
    "                'Depth of food deficit',\n",
    "                'Human Development Index (HDI)',\n",
    "                'Gross National Income (GNI) per Capita',\n",
    "                'gini of household income reported in Gallup, by wp5-year',\n",
    "                'Multidimensional Poverty Index (MPI, 2010)',\n",
    "                'Living Standards',\n",
    "                'Population Below National Poverty Line'\n",
    "                \n",
    "                ]]\n",
    "model1 = sm.Logit(Y, X, missing='drop').fit()\n",
    "print(model1.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.000953004721581 2.369482249725706 1.0009968793553032 12.004257212026806 1.0002785208915947 1.3583196451560653 498.5688018113216 1.0236583402556625 1.0057137052216194\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/jt/bdkqy39970s3tmsfrwm8j1yc0000gn/T/ipykernel_11284/2966615122.py:4: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  print(1/math.exp(model1.params[0]), 1/math.exp(model1.params[1]), math.exp(model1.params[2]), math.exp(model1.params[3]), 1/math.exp(model1.params[4]), math.exp(model1.params[5]),math.exp(model1.params[6]), 1/math.exp(model1.params[7]), 1/math.exp(model1.params[8]))\n"
     ]
    }
   ],
   "source": [
    "#exponentiating to interpret as odds.\n",
    "#take inverse if negative\n",
    "\n",
    "print(1/math.exp(model1.params[0]), 1/math.exp(model1.params[1]), math.exp(model1.params[2]), math.exp(model1.params[3]), 1/math.exp(model1.params[4]), math.exp(model1.params[5]),math.exp(model1.params[6]), 1/math.exp(model1.params[7]), 1/math.exp(model1.params[8]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Logit Marginal Effects       \n",
      "=====================================\n",
      "Dep. Variable:              SS Binary\n",
      "Method:                          dydx\n",
      "At:                           overall\n",
      "============================================================================================================================\n",
      "                                                              dy/dx    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------------------------------------\n",
      "Access to piped water                                       -0.0001      0.004     -0.036      0.972      -0.008       0.007\n",
      "Availability of affordable housing                          -0.1212      0.404     -0.300      0.764      -0.914       0.672\n",
      "Depth of food deficit                                        0.0001      0.001      0.219      0.827      -0.001       0.001\n",
      "Human Development Index (HDI)                                0.3491      0.668      0.523      0.601      -0.959       1.658\n",
      "Gross National Income (GNI) per Capita                   -3.912e-05   2.57e-05     -1.523      0.128   -8.95e-05    1.12e-05\n",
      "gini of household income reported in Gallup, by wp5-year     0.0430      0.534      0.081      0.936      -1.004       1.090\n",
      "Multidimensional Poverty Index (MPI, 2010)                   0.8726      0.525      1.661      0.097      -0.157       1.903\n",
      "Living Standards                                            -0.0033      0.006     -0.540      0.589      -0.015       0.009\n",
      "Population Below National Poverty Line                      -0.0008      0.004     -0.198      0.843      -0.009       0.007\n",
      "============================================================================================================================\n"
     ]
    }
   ],
   "source": [
    "model1_marginals = model1.get_margeff()\n",
    "print(model1_marginals.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Logit Marginal Effects       \n",
      "=====================================\n",
      "Dep. Variable:              SS Binary\n",
      "Method:                          dydx\n",
      "At:                            median\n",
      "============================================================================================================================\n",
      "                                                              dy/dx    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------------------------------------\n",
      "Access to piped water                                       -0.0002      0.006     -0.035      0.972      -0.011       0.011\n",
      "Availability of affordable housing                          -0.1833      0.632     -0.290      0.772      -1.422       1.056\n",
      "Depth of food deficit                                        0.0002      0.001      0.222      0.824      -0.002       0.002\n",
      "Human Development Index (HDI)                                0.5280      1.084      0.487      0.626      -1.596       2.652\n",
      "Gross National Income (GNI) per Capita                   -5.916e-05   4.74e-05     -1.249      0.211      -0.000    3.36e-05\n",
      "gini of household income reported in Gallup, by wp5-year     0.0651      0.809      0.080      0.936      -1.520       1.650\n",
      "Multidimensional Poverty Index (MPI, 2010)                   1.3197      0.707      1.866      0.062      -0.067       2.706\n",
      "Living Standards                                            -0.0050      0.009     -0.566      0.572      -0.022       0.012\n",
      "Population Below National Poverty Line                      -0.0012      0.006     -0.197      0.844      -0.013       0.011\n",
      "============================================================================================================================\n"
     ]
    }
   ],
   "source": [
    "model1_marginals = model1.get_margeff(at='median')\n",
    "print(model1_marginals.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[28.  5.]\n",
      " [ 4. 21.]]\n"
     ]
    }
   ],
   "source": [
    "model1_pred = model1.pred_table()\n",
    "print(model1_pred) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8484848484848485 0.84\n"
     ]
    }
   ],
   "source": [
    "correct_i = 28 / (28 + 5) # The proportion of correct predictions of 0.\n",
    "correct_j = 21 / (21 + 4) # The proportion of correct predictions of 1.\n",
    "print(correct_i, correct_j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.452148\n",
      "         Iterations 7\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:              SS Binary   No. Observations:                  120\n",
      "Model:                          Logit   Df Residuals:                      112\n",
      "Method:                           MLE   Df Model:                            7\n",
      "Date:                Thu, 21 Dec 2023   Pseudo R-squ.:                  0.1959\n",
      "Time:                        22:44:26   Log-Likelihood:                -54.258\n",
      "converged:                       True   LL-Null:                       -67.480\n",
      "Covariance Type:            nonrobust   LLR p-value:                 0.0004193\n",
      "================================================================================================\n",
      "                                   coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------------\n",
      "Press Freedom Index              0.0329      0.027      1.208      0.227      -0.020       0.086\n",
      "Political rights                 0.1145      0.188      0.609      0.542      -0.254       0.483\n",
      "Freedom of speech                1.6721      0.669      2.499      0.012       0.361       2.984\n",
      "Private property rights         -0.0039      0.027     -0.144      0.886      -0.057       0.049\n",
      "Freedom over life choices       -0.1934      2.559     -0.076      0.940      -5.210       4.823\n",
      "Corruption                      -0.0638      0.038     -1.678      0.093      -0.138       0.011\n",
      "Freedom to make life choices    -0.4237      2.724     -0.156      0.876      -5.763       4.915\n",
      "Perceptions of corruption       -1.3452      1.419     -0.948      0.343      -4.126       1.436\n",
      "================================================================================================\n"
     ]
    }
   ],
   "source": [
    "#Regression Model for Government\n",
    "\n",
    "Y = IndexTotal['SS Binary']\n",
    "X = IndexTotal[['Press Freedom Index',\n",
    "                'Political rights',\n",
    "                'Freedom of speech',\n",
    "                'Private property rights',\n",
    "                'Freedom over life choices',\n",
    "                'Corruption',\n",
    "                'Freedom to make life choices',\n",
    "                'Perceptions of corruption',\n",
    "                \n",
    "                \n",
    "                ]]\n",
    "model2 = sm.Logit(Y, X, missing='drop').fit()\n",
    "print(model2.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0334795829514065 1.1212672685522969 5.323157513960677 1.0038846808527515 1.213331947509986 1.0659235549218322 1.527679310675649 3.8388065802658944\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/jt/bdkqy39970s3tmsfrwm8j1yc0000gn/T/ipykernel_11284/771690228.py:4: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  print(math.exp(model2.params[0]), math.exp(model2.params[1]), math.exp(model2.params[2]), 1/math.exp(model2.params[3]), 1/math.exp(model2.params[4]), 1/math.exp(model2.params[5]), 1/math.exp(model2.params[6]), 1/math.exp(model2.params[7]))\n"
     ]
    }
   ],
   "source": [
    "#exponentiating to interpret as odds.\n",
    "#take inverse if negative\n",
    "\n",
    "print(math.exp(model2.params[0]), math.exp(model2.params[1]), math.exp(model2.params[2]), 1/math.exp(model2.params[3]), 1/math.exp(model2.params[4]), 1/math.exp(model2.params[5]), 1/math.exp(model2.params[6]), 1/math.exp(model2.params[7]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Logit Marginal Effects       \n",
      "=====================================\n",
      "Dep. Variable:              SS Binary\n",
      "Method:                          dydx\n",
      "At:                           overall\n",
      "================================================================================================\n",
      "                                  dy/dx    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------------\n",
      "Press Freedom Index              0.0049      0.004      1.231      0.218      -0.003       0.013\n",
      "Political rights                 0.0170      0.028      0.614      0.539      -0.037       0.071\n",
      "Freedom of speech                0.2481      0.090      2.768      0.006       0.072       0.424\n",
      "Private property rights         -0.0006      0.004     -0.144      0.886      -0.008       0.007\n",
      "Freedom over life choices       -0.0287      0.380     -0.076      0.940      -0.773       0.716\n",
      "Corruption                      -0.0095      0.005     -1.747      0.081      -0.020       0.001\n",
      "Freedom to make life choices    -0.0629      0.404     -0.156      0.876      -0.855       0.729\n",
      "Perceptions of corruption       -0.1996      0.206     -0.968      0.333      -0.604       0.204\n",
      "================================================================================================\n"
     ]
    }
   ],
   "source": [
    "model2_marginals = model2.get_margeff()\n",
    "print(model2_marginals.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Logit Marginal Effects       \n",
      "=====================================\n",
      "Dep. Variable:              SS Binary\n",
      "Method:                          dydx\n",
      "At:                            median\n",
      "================================================================================================\n",
      "                                  dy/dx    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------------\n",
      "Press Freedom Index              0.0062      0.005      1.230      0.219      -0.004       0.016\n",
      "Political rights                 0.0214      0.035      0.618      0.537      -0.046       0.089\n",
      "Freedom of speech                0.3126      0.128      2.435      0.015       0.061       0.564\n",
      "Private property rights         -0.0007      0.005     -0.144      0.886      -0.011       0.009\n",
      "Freedom over life choices       -0.0362      0.478     -0.076      0.940      -0.974       0.901\n",
      "Corruption                      -0.0119      0.007     -1.631      0.103      -0.026       0.002\n",
      "Freedom to make life choices    -0.0792      0.507     -0.156      0.876      -1.073       0.915\n",
      "Perceptions of corruption       -0.2515      0.262     -0.960      0.337      -0.765       0.262\n",
      "================================================================================================\n"
     ]
    }
   ],
   "source": [
    "model2_marginals = model2.get_margeff(at='median')\n",
    "print(model2_marginals.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[85.  5.]\n",
      " [22.  8.]]\n"
     ]
    }
   ],
   "source": [
    "model2_pred = model2.pred_table()\n",
    "print(model2_pred) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9444444444444444 0.7333333333333333\n"
     ]
    }
   ],
   "source": [
    "correct_i = 85 / (85 + 5) # The proportion of correct predictions of 0.\n",
    "correct_j = 22 / (22 + 8) # The proportion of correct predictions of 1.\n",
    "print(correct_i, correct_j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.355250\n",
      "         Iterations 8\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:              SS Binary   No. Observations:                  120\n",
      "Model:                          Logit   Df Residuals:                      112\n",
      "Method:                           MLE   Df Model:                            7\n",
      "Date:                Thu, 21 Dec 2023   Pseudo R-squ.:                  0.3683\n",
      "Time:                        23:12:25   Log-Likelihood:                -42.630\n",
      "converged:                       True   LL-Null:                       -67.480\n",
      "Covariance Type:            nonrobust   LLR p-value:                 1.654e-08\n",
      "==========================================================================================\n",
      "                             coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Homicide rate             -0.2379      0.284     -0.836      0.403      -0.796       0.320\n",
      "Level of violent crime     0.7668      0.441      1.740      0.082      -0.097       1.630\n",
      "Perceived criminality      0.0118      0.391      0.030      0.976      -0.755       0.779\n",
      "Internet users            -0.0594      0.020     -3.004      0.003      -0.098      -0.021\n",
      "Suicide rate              -0.0342      0.041     -0.834      0.404      -0.115       0.046\n",
      "Life Ladder               -0.3992      0.371     -1.075      0.282      -1.127       0.328\n",
      "Generosity                 0.0903      1.882      0.048      0.962      -3.598       3.779\n",
      "Positive affect            1.6907      2.805      0.603      0.547      -3.807       7.188\n",
      "==========================================================================================\n"
     ]
    }
   ],
   "source": [
    "#Regression Model for Happiness/Community Values\n",
    "\n",
    "Y = IndexTotal['SS Binary']\n",
    "X = IndexTotal[['Homicide rate',\n",
    "                'Level of violent crime',\n",
    "                'Perceived criminality',\n",
    "                'Internet users',\n",
    "                'Suicide rate',\n",
    "                'Life Ladder',\n",
    "                'Generosity',\n",
    "                'Positive affect',\n",
    "                \n",
    "                \n",
    "                ]]\n",
    "model3 = sm.Logit(Y, X, missing='drop').fit()\n",
    "print(model3.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.2686171862600881 2.1528053007563783 1.0118657968498508 1.0612376901597695 1.034768311115887 1.4905903661105153 1.0945277189039826 1.0945277189039826\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/jt/bdkqy39970s3tmsfrwm8j1yc0000gn/T/ipykernel_11284/2254770029.py:4: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
      "  print(1/math.exp(model3.params[0]), math.exp(model3.params[1]), math.exp(model3.params[2]), 1/math.exp(model3.params[3]), 1/math.exp(model3.params[4]), 1/math.exp(model3.params[5]), math.exp(model3.params[6]), math.exp(model3.params[6]))\n"
     ]
    }
   ],
   "source": [
    "#exponentiating to interpret as odds.\n",
    "#take inverse if negative\n",
    "\n",
    "print(1/math.exp(model3.params[0]), math.exp(model3.params[1]), math.exp(model3.params[2]), 1/math.exp(model3.params[3]), 1/math.exp(model3.params[4]), 1/math.exp(model3.params[5]), math.exp(model3.params[6]), math.exp(model3.params[6]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Logit Marginal Effects       \n",
      "=====================================\n",
      "Dep. Variable:              SS Binary\n",
      "Method:                          dydx\n",
      "At:                           overall\n",
      "==========================================================================================\n",
      "                            dy/dx    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Homicide rate             -0.0277      0.033     -0.847      0.397      -0.092       0.036\n",
      "Level of violent crime     0.0893      0.049      1.829      0.067      -0.006       0.185\n",
      "Perceived criminality      0.0014      0.046      0.030      0.976      -0.088       0.091\n",
      "Internet users            -0.0069      0.002     -3.615      0.000      -0.011      -0.003\n",
      "Suicide rate              -0.0040      0.005     -0.847      0.397      -0.013       0.005\n",
      "Life Ladder               -0.0465      0.042     -1.095      0.273      -0.130       0.037\n",
      "Generosity                 0.0105      0.219      0.048      0.962      -0.419       0.440\n",
      "Positive affect            0.1968      0.325      0.606      0.544      -0.440       0.833\n",
      "==========================================================================================\n"
     ]
    }
   ],
   "source": [
    "model3_marginals = model3.get_margeff()\n",
    "print(model3_marginals.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Logit Marginal Effects       \n",
      "=====================================\n",
      "Dep. Variable:              SS Binary\n",
      "Method:                          dydx\n",
      "At:                            median\n",
      "==========================================================================================\n",
      "                            dy/dx    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------\n",
      "Homicide rate             -0.0247      0.033     -0.740      0.459      -0.090       0.041\n",
      "Level of violent crime     0.0796      0.055      1.443      0.149      -0.028       0.188\n",
      "Perceived criminality      0.0012      0.041      0.030      0.976      -0.078       0.081\n",
      "Internet users            -0.0062      0.002     -2.617      0.009      -0.011      -0.002\n",
      "Suicide rate              -0.0035      0.004     -0.818      0.414      -0.012       0.005\n",
      "Life Ladder               -0.0414      0.041     -1.003      0.316      -0.122       0.040\n",
      "Generosity                 0.0094      0.195      0.048      0.962      -0.374       0.392\n",
      "Positive affect            0.1756      0.310      0.565      0.572      -0.433       0.784\n",
      "==========================================================================================\n"
     ]
    }
   ],
   "source": [
    "model3_marginals = model3.get_margeff(at='median')\n",
    "print(model3_marginals.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[83.  7.]\n",
      " [13. 17.]]\n"
     ]
    }
   ],
   "source": [
    "model3_pred = model3.pred_table()\n",
    "print(model3_pred) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9222222222222223 0.6538461538461539\n"
     ]
    }
   ],
   "source": [
    "correct_i = 83 / (83 + 7) # The proportion of correct predictions of 0.\n",
    "correct_j = 17 / (13 + 13) # The proportion of correct predictions of 1.\n",
    "print(correct_i, correct_j)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
